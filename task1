{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom matplotlib import pyplot as plt    \nimport seaborn\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-09-02T16:09:49.177682Z","iopub.execute_input":"2022-09-02T16:09:49.177999Z","iopub.status.idle":"2022-09-02T16:09:49.313230Z","shell.execute_reply.started":"2022-09-02T16:09:49.177975Z","shell.execute_reply":"2022-09-02T16:09:49.312443Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/nasa-nearest-earth-objects/neo_v2.csv')\ndata[:5]","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:09:52.072569Z","iopub.execute_input":"2022-09-02T16:09:52.072863Z","iopub.status.idle":"2022-09-02T16:09:52.274768Z","shell.execute_reply.started":"2022-09-02T16:09:52.072840Z","shell.execute_reply":"2022-09-02T16:09:52.274182Z"},"jupyter":{"source_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.hazardous = [1 if each == True else 0 for each in data.hazardous]\ndata.sentry_object = [1 if each == True else 0 for each in data.sentry_object]\ndata.orbiting_body = [1 if each == True else 0 for each in data.orbiting_body]","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:09:53.964737Z","iopub.execute_input":"2022-09-02T16:09:53.965408Z","iopub.status.idle":"2022-09-02T16:09:54.061412Z","shell.execute_reply.started":"2022-09-02T16:09:53.965381Z","shell.execute_reply":"2022-09-02T16:09:54.060594Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data.drop(['sentry_object', 'orbiting_body', 'id', 'name'], axis = 1, inplace = True)\ndata[:5]","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:09:55.941847Z","iopub.execute_input":"2022-09-02T16:09:55.942148Z","iopub.status.idle":"2022-09-02T16:09:55.960981Z","shell.execute_reply.started":"2022-09-02T16:09:55.942125Z","shell.execute_reply":"2022-09-02T16:09:55.960181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pairplots = seaborn.pairplot(data, vars=[\"est_diameter_min\", \"est_diameter_max\", \"relative_velocity\", \"miss_distance\", \"absolute_magnitude\"], hue = \"hazardous\")","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:17:59.998037Z","iopub.execute_input":"2022-09-02T16:17:59.998402Z","iopub.status.idle":"2022-09-02T16:19:37.309571Z","shell.execute_reply.started":"2022-09-02T16:17:59.998372Z","shell.execute_reply":"2022-09-02T16:19:37.308954Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Split into x and y\nx = data.drop('hazardous' , axis = 1)\ny = data.hazardous.astype(\"int\")\nprint(x.shape, y.shape)\nx.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:33:17.592877Z","iopub.execute_input":"2022-09-02T16:33:17.593160Z","iopub.status.idle":"2022-09-02T16:33:17.606705Z","shell.execute_reply.started":"2022-09-02T16:33:17.593137Z","shell.execute_reply":"2022-09-02T16:33:17.606126Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"count_zeros = 0\ncount_ones = 0\nfor i in range(0,90836):\n    if y[i] == 0:\n        count_zeros +=1\n    else:\n        count_ones += 1       \n                 ","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:09:59.728012Z","iopub.execute_input":"2022-09-02T16:09:59.728615Z","iopub.status.idle":"2022-09-02T16:10:00.031492Z","shell.execute_reply.started":"2022-09-02T16:09:59.728586Z","shell.execute_reply":"2022-09-02T16:10:00.030644Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig, ax = plt.subplots(figsize = (9,4))\nplot_data = {'positive examples': count_ones, 'negative examples': count_zeros}\nlist1 = list(plot_data.keys())\nlist2 = list(plot_data.values())\nax.barh(list1, list2)\n\nfor s in ['top', 'bottom','left', 'right']:\n    ax.spines[s].set_visible(False)\n    \nax.xaxis.set_ticks_position('none')\nax.yaxis.set_ticks_position('none')\n\nax.xaxis.set_tick_params(pad = 5)\nax.yaxis.set_tick_params(pad = 5)\n\nax.grid()\n\nax.set_title('number of examples', loc = 'center')\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:10:01.764292Z","iopub.execute_input":"2022-09-02T16:10:01.764652Z","iopub.status.idle":"2022-09-02T16:10:01.945402Z","shell.execute_reply.started":"2022-09-02T16:10:01.764619Z","shell.execute_reply":"2022-09-02T16:10:01.944600Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"#Even though lot shows data bias (We can see that negative examples are more heavily weighed),\n#the data is representative of real world, therefore is used as it is for training. To train an svm model\n#we need the same amount of positive and negative examples. Otherwise the model will label large points as false negative.\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x = (x - np.min(x))/(np.max(x)-np.min(x)).values\nx[:20]","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:10:04.633429Z","iopub.execute_input":"2022-09-02T16:10:04.633790Z","iopub.status.idle":"2022-09-02T16:10:04.652951Z","shell.execute_reply.started":"2022-09-02T16:10:04.633762Z","shell.execute_reply":"2022-09-02T16:10:04.652052Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since est_diameter_max and est_diameter_min is same. Dropping one coloumn and renaming other as diameter_value\n*after performing mean normalisation","metadata":{}},{"cell_type":"code","source":"#Since est_diameter_max and est_diameter_min is same. Dropping one coloumn est_diameter_min\nx = data.drop(['est_diameter_min', 'hazardous'], axis = 1)\nx.head()","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:10:09.710798Z","iopub.execute_input":"2022-09-02T16:10:09.711528Z","iopub.status.idle":"2022-09-02T16:10:09.720866Z","shell.execute_reply.started":"2022-09-02T16:10:09.711498Z","shell.execute_reply":"2022-09-02T16:10:09.720251Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Plotting correlation heatmap for final comparison \n#before training model\n\nfigure = plt.figure(figsize=(12, 6))\n#corr plot; cool\nseaborn.heatmap(x.corr(), annot=True,cmap=plt.cm.cool)\nplt.xlabel('Corr')\nplt.title('HEATPLOT')\n#tight layout for better readability\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:27:01.653704Z","iopub.execute_input":"2022-09-02T16:27:01.654021Z","iopub.status.idle":"2022-09-02T16:27:01.915795Z","shell.execute_reply.started":"2022-09-02T16:27:01.653997Z","shell.execute_reply":"2022-09-02T16:27:01.914618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)\ny_test[:5]\n","metadata":{"execution":{"iopub.status.busy":"2022-09-02T12:04:33.058947Z","iopub.execute_input":"2022-09-02T12:04:33.059353Z","iopub.status.idle":"2022-09-02T12:04:33.084306Z","shell.execute_reply.started":"2022-09-02T12:04:33.059318Z","shell.execute_reply":"2022-09-02T12:04:33.082993Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score","metadata":{"execution":{"iopub.status.busy":"2022-09-02T12:04:33.087979Z","iopub.execute_input":"2022-09-02T12:04:33.089021Z","iopub.status.idle":"2022-09-02T12:04:33.095328Z","shell.execute_reply.started":"2022-09-02T12:04:33.088969Z","shell.execute_reply":"2022-09-02T12:04:33.093912Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"listX = ['rbf','sigmoid', 'poly']\ny_true = y_test\nfor best in listX:\n    model = SVC( kernel = best)\n    fit_model = model.fit(X_train, y_train)\n    model_pred = model.predict(X_test)\n    acc = accuracy_score(y_true, model_pred)\n    prec = (precision_score(y_true, model_pred))\n    print(best)\n    print('accuracy, precision')\n    print(acc)\n    print(prec)\n    #print the confusion matrix\n    conf_matrix = confusion_matrix(y_true, model_pred)\n\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.matshow(conf_matrix, cmap=plt.cm.Oranges, alpha=0.3)\n    for i in range(conf_matrix.shape[0]):\n        for j in range(conf_matrix.shape[1]):\n            ax.text(x=j, y=i,s=conf_matrix[i, j], va='center', ha='center')\n            #, size='xx-large')\n    plt.xlabel('Predictions', fontsize=18)\n    plt.ylabel('Actuals', fontsize=18)\n    plt.title('Confusion Matrix', fontsize=18)\n    plt.show()\n    #Acc_model = print('Accuracy with kernel %s: %.3f', %(best, accuracy_score(y_true, model_pred)))\n    #prec_model = print('Precision with kernel %s: %.3f', %(best, precision_score(y_true, model_pred)))\n    #f1_score = print('f1 sscore with kernel %s: %.3f', %(best,f1_score(y_true, model_pred)))","metadata":{"execution":{"iopub.status.busy":"2022-09-02T12:04:33.096957Z","iopub.execute_input":"2022-09-02T12:04:33.097826Z","iopub.status.idle":"2022-09-02T12:08:34.063067Z","shell.execute_reply.started":"2022-09-02T12:04:33.097776Z","shell.execute_reply":"2022-09-02T12:08:34.061292Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#linear kernel fails to give any output after long\n#duration indicating that the dataset may not be linearly\n#seprable.","metadata":{"execution":{"iopub.status.busy":"2022-09-02T12:08:34.065430Z","iopub.execute_input":"2022-09-02T12:08:34.067433Z","iopub.status.idle":"2022-09-02T12:08:34.074778Z","shell.execute_reply.started":"2022-09-02T12:08:34.067335Z","shell.execute_reply":"2022-09-02T12:08:34.072960Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":" **The cell given below does not run.**","metadata":{}},{"cell_type":"code","source":"    #model = SVC( kernel = 'linear')\n    #fit_model = model.fit(X_train, y_train)\n    #model_pred = model.predict(X_test)\n    #Acc_model = print('linear' + ' Accuracy: %.3f', (accuracy_score(y_true, model_pred)))\n    #prec_model = print('linear' + ' Precision:' ,(precision_score(y_true, model_pred)))\n    #recll_model = print('linear' + ' Recall: %.3lf',(recall_score(y_true, model_pred)))\n    #print(type(prec_model))\n    #print(type(recll_model))\n    #f1_score = print((prec_model*recll_model)/(prec_model + recll_model))\n\n    #print the confusio matrix\n    #conf_matrix = confusion_matrix(y_true, model_pred)\n\n    #fig, ax = plt.subplots(figsize=(5, 5))\n    #ax.matshow(conf_matrix, cmap=plt.cm.Oranges, alpha=0.3)\n    #for i in range(conf_matrix.shape[0]):\n        #for j in range(conf_matrix.shape[1]):\n            #ax.text(x=j, y=i,s=conf_matrix[i, j], va='center', ha='center')\n            #, size='xx-large')\n    #plt.xlabel('Predictions', fontsize=18)\n    #plt.ylabel('Actuals', fontsize=18)\n    #plt.title('Confusion Matrix', fontsize=18)\n    #plt.show()","metadata":{"execution":{"iopub.status.busy":"2022-09-02T12:08:34.101810Z","iopub.execute_input":"2022-09-02T12:08:34.102878Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print('f1_score:')\nprint('for rbf: 0')\nprint('for sigmoid: 0.09')\nprint('for polynomial: 0')\nprint('linear kernel does not run, and therefore no result')","metadata":{"execution":{"iopub.status.busy":"2022-09-02T16:31:55.397516Z","iopub.execute_input":"2022-09-02T16:31:55.397808Z","iopub.status.idle":"2022-09-02T16:31:55.402639Z","shell.execute_reply.started":"2022-09-02T16:31:55.397785Z","shell.execute_reply":"2022-09-02T16:31:55.401842Z"},"trusted":true},"execution_count":null,"outputs":[]}]}
